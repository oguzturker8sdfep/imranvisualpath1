@def pair(example: String,
          frags: Seq[scalatags.Text.TypedTag[String]],
          autorun: Boolean = false) = {
  val ids = (0 until frags.length).map(_ => util.Random.nextInt(999999))
  val queries = ids.map(id => s"document.getElementById('$id')").mkString(", ")
  div(
    div(width:="50%", float.left)(
      hl.ref(
        "example/src/main/scala/example/Example.scala",
        Seq(s"object $example", "main")
      )
    ),
    div(width:="50%", float.left, padding:="8px", boxSizing.`border-box`)(
      if (!autorun)
        a(cls:="pure-button", onclick:=s"example.$example().main($queries)", "Run"),
      div(
        frags.zip(ids).map{case (f, i) => f(id:=i, backgroundColor:="#fafafa")}
      ),
      if (autorun)
        script(s"example.$example().main($queries)")
    ),
    div(clear.both)
  )
}

@scalatags.Text.tags2.style
  pre{
    margin: 0px;

  }

@sect{scala-js-dom}

  @p
    Scala-js-dom provides a nice statically typed interface to the DOM such that it can be called from Scala code without resorting to @hl.scala{js.Dynamic}. All javascript globals functions, singletons and classes are members of the @hl.scala{org.scalajs.dom} package, e.g.

  @pair("Alert", Nil)

  @p
    Will cause a javascript alert box saying `HAI` to appear. Other javascript classes and objects can be similarly accessed e.g. @hl.scala{new dom.XMLHttpRequest()} to perform a new Ajax request, @hl.scala{dom.document} to access the global @hl.scala{document} object, or @hl.scala{dom.setInterval(() => ???, 1000)} to schedule a recurring task every second. The names of these functions/singletons/classes match their Javascript equivalents exactly, so if you want to know how to do something (e.g. "how do I open a websocket connection") the syntax is the same as if you were using raw Javascript.

  @sect{Usage}
    @p
      Add the following to your sbt build definition:

    @hl.scala
      libraryDependencies += "org.scala-lang.modules.scalajs" %%% "scalajs-dom" % "0.6"

    @p
      then enjoy the types available in @hl.scala{org.scalajs.dom}. scalajs-dom 0.6 is built and published for Scala.js 0.5.0 and following in the 0.5.x series, with both Scala 2.10 and 2.11. Here are some examples to get you started:

  @sect{Node.appendChild}
    @pair(
      "NodeAppendChild",
      Seq(div("div"))
    )

  @sect{Node.onmousemove}
    @pair(
     "EventHandler",
      Seq(pre("pre")),
      autorun=true
    )

  @sect{dom.btoa}
    @pair(
      "Base64",
      Seq(input(width:="100%", placeholder:="Enter text to b64 encode"), div),
      autorun=true
    )

  @sect{dom.localStorage}
    @pair(
      "LocalStorage",
      Seq(input(width:="100%"), div),
      autorun=true
    )

  @sect{dom.HTMLCanvasElement}
    @pair(
      "Canvas",
      Seq(canvas),
      autorun=true
    )

  @sect{dom.XMLHttpRequest}
    @pair(
      "XMLHttpRequest",
      Seq(
        pre("output")
      )
    )

  @sect{dom.Websocket}
    @pair(
      "Websocket",
      Seq(
        input(placeholder:="Type something in"),
        pre("output")
      ),
      autorun=true
    )

  @sect{Element.style}
    @pair(
      "ElementStyle",
      Seq(div(b("div"), height:="50px"))
    )

  @p
    The goal of this project is to provide a thin-but-idiomatic-scala interface to modern browser APIs. In particular:
  @ul
    @li
      Deprecated properties/methods/types will not be present.
    @li
      IE-only, Chrome-only, FF-only, and in general browser-specific attributes will not be present.
    @li
      The name of a Scala type should map directly to the name of the corresponding Javascript type.
    @li
      Any type which is a Javascript type (e.g. you can @hl.scala{instanceof} in javascript) should be a Scala @hl.scala{class}; any other interface which isn't a Javascript type should be a @hl.scala{trait}.
    @li
      Read-only members should be @hl.scala{def}, and not-directly-instantiable classes should have @hl.scala{private} constructors.

  @sect{Extensions}

    @p
      Apart from @hl.scala{Color}, Scala-js-dom contains some useful helpers and implicit classes in @hl.scala{org.scalajs.dom.extensions} that serve no purpose other than to make your use of the DOM more pleasant.

    @p
      Examples include the @hl.scala{Ajax.get} and @hl.scala{Ajax.post} methods which let you avoid messing with @hl.scala{dom.XMLHttpRequest} directly, or @hl.scala{KeyCodes} which provides a nice list of the keycodes that result from pressing various keys on the keyboard.
    @pair(
      "AjaxExtension",
      Seq(
        pre("output")
      )
    )

    @p
      See also @a("roll", href:="https://github.com/lihaoyi/roll") (@a("live demo", href:="http://lihaoyi.github.io/roll/")) and @a("scala-js-games", href:="https://github.com/lihaoyi/scala-js-games") for an example of its use. @a("Scala-js-fiddle", href:="http://www.scala-js-fiddle.com/") also contains a pile of @a("fun examples", href:="(http://www.scala-js-fiddle.com/gist/9405209/Oscilloscope.scala") that demonstrate its usage. Pull requests/forks are welcome!

  @sect{Contributing}
    @p
      Scala-js-dom is a work in progress. The current code base is a hodgepodge of auto-generated/scraped/hand-tweaked code, and is full of rough edges. If you see something that you think can be improved, feel free to send a pull request. These could include:
    @ul
      @li
        Improved doc-comments; who doesn't love better docs?
      @li
        Missing methods/properties/classes; send the PR adding it in including it together with a link to an authoritative source (e.g. MDN) and it should get merged.
      @li
        Additional extensions (in @hl.scala{org.scalajs.dom.extensions}). These currently represent an arbitrary collection of helpers that have been needed so far. If there's some implicit that you find you need and you think other people will to, send a pull request and we can talk about it.
